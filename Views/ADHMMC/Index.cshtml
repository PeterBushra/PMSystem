@model Jobick.ViewModels.ProjectStatisticsVM
@using System.Text.Json
@using System.Globalization
@{
    Layout = "~/Views/Shared/_LayoutJobick.cshtml";
    ViewData["Title"] = "بيانات المشاريع";

    var total = Model.InProgressProjects + Model.NotStartedProjects + Model.DoneProjects;

    // First KPI (counts by year already present)
    var orderedYears = Model.ProjectsCountByYear.OrderBy(x => x.Key).ToList();
    var yearsJson  = JsonSerializer.Serialize(orderedYears.Select(x => x.Key));
    var countsJson = JsonSerializer.Serialize(orderedYears.Select(x => x.Value));

    // NEW: Budgets per year (Fourth KPI) - based on EndDate.Year
    var orderedBudgetYears = Model.ProjectsBudgetsByYear.OrderBy(x => x.Key).ToList();
    var budgetYearsJson = JsonSerializer.Serialize(orderedBudgetYears.Select(x => x.Key));
    var budgetYearValuesJson = JsonSerializer.Serialize(orderedBudgetYears.Select(x => x.Value));

    // Third KPI – ordered budgets & real names
    var orderedBudgets = Model.AllProjectsBudgetsExceptFullyDone
        .OrderByDescending(x => x.Value)
        .ToList();

    // Safely map Id -> Name (fallback to "مشروع {id}")
    var budgetLabelsJson = JsonSerializer.Serialize(
        orderedBudgets.Select(x =>
            Model.ProjectNames.TryGetValue(x.Key, out var name) && !string.IsNullOrWhiteSpace(name)
                ? name
                : $"مشروع {x.Key}"
        ));

    var budgetValuesJson = JsonSerializer.Serialize(orderedBudgets.Select(x => x.Value));
    var totalBudget = orderedBudgets.Sum(b => b.Value);

    // Arabic compact display (no decimals): ألف / مليون / مليار / تريليون, with Arabic number formatting.
    var ar = new CultureInfo("ar-EG");
    var totalBudgetCompact = totalBudget.ToString("N0", ar);
    var totalBudgetExact   = totalBudget.ToString("N2", ar);

    // NEW: Progress Comparison Data (Sixth KPI)
    var orderedProgressYears = Model.TargetedProgressByYear.Keys
        .Union(Model.ActualProgressByYear.Keys)
        .OrderBy(y => y)
        .ToList();
    
    var progressYearsJson = JsonSerializer.Serialize(orderedProgressYears);
    var targetedProgressJson = JsonSerializer.Serialize(
        orderedProgressYears.Select(y => Model.TargetedProgressByYear.GetValueOrDefault(y, 0m))
    );
    var actualProgressJson = JsonSerializer.Serialize(
        orderedProgressYears.Select(y => Model.ActualProgressByYear.GetValueOrDefault(y, 0m))
    );

    // NEW: Quarterly Progress Data
    var orderedQuarters = Model.TargetedProgressByQuarter.Keys
        .Union(Model.ActualProgressByQuarter.Keys)
        .OrderBy(q => q)
        .ToList();

    var progressQuartersJson = JsonSerializer.Serialize(orderedQuarters);
    var targetedProgressQuarterlyJson = JsonSerializer.Serialize(
        orderedQuarters.Select(q => Model.TargetedProgressByQuarter.GetValueOrDefault(q, 0m))
    );
    var actualProgressQuarterlyJson = JsonSerializer.Serialize(
        orderedQuarters.Select(q => Model.ActualProgressByQuarter.GetValueOrDefault(q, 0m))
    );

    // Added: Responsible filter data from ViewBag
    var responsibleList = ViewBag.ResponsibleList as List<string> ?? new List<string>();
    string? selectedResponsible = ViewBag.SelectedResponsible as string;
    bool hasResponsibleOptions = (ViewBag.HasResponsibleOptions as bool?) ?? false;
}
<div class="content-body">
    <div class="container-fluid">
        @await Html.PartialAsync("_ADHMMC_FilterToolbar", Model)
        @await Html.PartialAsync("_ADHMMC_KPIRow", Model)
        @await Html.PartialAsync("_ADHMMC_ChartsRow", Model)
        @await Html.PartialAsync("_ADHMMC_BudgetChartsRow", Model)
        @await Html.PartialAsync("_ADHMMC_ProgressComparisonRow", Model)
        @await Html.PartialAsync("_ADHMMC_DetailedProjectProgressRow", Model)
        @await Html.PartialAsync("_ADHMMC_OverdueTable", Model)
    </div>
</div>

@section Jobick_style{
    <link href="~/Jobick/vendor/datatables/css/jquery.dataTables.min.css" rel="stylesheet" />
    <link href="~/Jobick/vendor/datatables/responsive/responsive.css" rel="stylesheet" />
    <link href="~/css/datatables-rtl.css" rel="stylesheet" />
    <link href="~/css/dashboard-modern.css" rel="stylesheet" />
    <!-- Added: bootstrap-select CSS for modern dropdown -->
    <link href="~/Jobick/vendor/bootstrap-select/dist/css/bootstrap-select.min.css" rel="stylesheet" />
    <link href="~/css/adhmmc-index.css" rel="stylesheet" />
    <link href="~/css/rtl-utilities.css" rel="stylesheet" />
}

@section Jobick_script{
    <script src="~/Jobick/vendor/global/global.min.js"></script>
    <script src="~/Jobick/js/custom.min.js"></script>
    <script src="~/Jobick/js/dlabnav-init.js"></script>
    <script src="~/Jobick/vendor/peity/jquery.peity.min.js"></script>
    <script src="~/Jobick/vendor/bootstrap-select/dist/js/bootstrap-select.min.js"></script>
    <script src="~/Jobick/vendor/bootstrap-datepicker-master/js/bootstrap-datepicker.min.js"></script>
    <script src="~/Jobick/vendor/apexchart/apexchart.js"></script>
    <script src="~/Jobick/vendor/datatables/js/jquery.dataTables.min.js"></script>
    <script src="~/Jobick/vendor/datatables/responsive/responsive.js"></script>
    <script src="~/Jobick/vendor/owl-carousel/owl.carousel.js"></script>

    <script>
        document.querySelectorAll('.delay-reasons-btn').forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent row click event from firing

                const reasons = this.getAttribute('data-reasons');
                const projectName = this.getAttribute('data-project-name');

                document.getElementById('projectNameModal').textContent = projectName;
                document.getElementById('delayReasonsContent').textContent = reasons;
            });
        });
    </script>   

    <script>
        // Initialize Bootstrap tooltips (for total budget hover)
        document.addEventListener('DOMContentLoaded', function () {
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.forEach(function (el) { new bootstrap.Tooltip(el); });
        });
    </script>
    <script>
        (function(){
            // Show loading overlay when filter changes
            let isFilterChanging = false;
            
            function showFilterLoading() {
                if (isFilterChanging) return;
                isFilterChanging = true;
                
                // Create overlay
                const overlay = document.createElement('div');
                overlay.id = 'filterLoadingOverlay';
                overlay.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(255, 255, 255, 0.9);
                    z-index: 9999;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    flex-direction: column;
                `;
                overlay.innerHTML = `
                    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-3 text-primary fw-bold" style="font-size: 1.2rem;">
                        جاري تطبيق التصفية...
                    </div>
                `;
                document.body.appendChild(overlay);
            }
            
            // Filter handling
            const $picker = $('.selectpicker');
            if($picker.length){
                $picker.selectpicker({
                    liveSearch: true,
                    noneSelectedText: 'اختر',
                    liveSearchPlaceholder: 'ابحث...'
                });
            }
            
            // Theme change handler - refresh selectpicker when theme changes
            const themeToggle = document.querySelector('.dlab-theme-mode');
            if (themeToggle) {
                themeToggle.addEventListener('click', function() {
                    // Wait for theme to change, then refresh selectpicker
                    setTimeout(function() {
                        if ($picker.length) {
                            $picker.selectpicker('refresh');
                        }
                    }, 100);
                });
            }
            
            // Get current URL parameters
            const urlParams = new URLSearchParams(window.location.search);
            let currentFilterType = urlParams.get('filterType') || 'responsible';
            let currentResponsible = urlParams.get('responsible') || 'الكل';
            let currentGoal = urlParams.get('goal');
            
            // If no URL parameters at all, redirect to set defaults
            if (!urlParams.has('filterType') && !urlParams.has('responsible') && !urlParams.has('goal')) {
                const url = new URL(window.location.href);
                url.searchParams.set('filterType', 'responsible');
                url.searchParams.set('responsible', 'الكل');
                window.location.href = url.toString();
                return; // Exit early to prevent further execution
            }
            
            // Radio button change handler
            document.querySelectorAll('input[name="filterTypeRadio"]').forEach(radio => {
                radio.addEventListener('change', function() {
                    const selectedType = this.value;
                    const responsibleContainer = document.getElementById('responsibleFilterContainer');
                    const goalContainer = document.getElementById('strategicGoalFilterContainer');
                    
                    if (selectedType === 'responsible') {
                        responsibleContainer.style.display = 'flex';
                        goalContainer.style.display = 'none';
                    } else {
                        responsibleContainer.style.display = 'none';
                        goalContainer.style.display = 'flex';
                    }
                    
                    // Navigate to clear the inactive filter and set filter type
                    const url = new URL(window.location.href);
                    url.searchParams.set('filterType', selectedType);
                    
                    if (selectedType === 'responsible') {
                        url.searchParams.delete('goal');
                        // Set to "الكل" if no responsible filter exists
                        if (!currentResponsible) {
                            url.searchParams.set('responsible', 'الكل');
                        }
                    } else {
                        url.searchParams.delete('responsible');
                        // Set to "الكل" if no goal filter exists
                        if (!currentGoal) {
                            url.searchParams.set('goal', 'الكل');
                        }
                    }
                    
                    showFilterLoading();
                    window.location.href = url.toString();
                });
            });
            
            // Responsible filter change handler
            document.getElementById('responsibleFilter')?.addEventListener('change', function(){
                const v = this.value;
                const url = new URL(window.location.href);
                url.searchParams.delete('goal');
                url.searchParams.set('responsible', v);
                url.searchParams.set('filterType', 'responsible');
                showFilterLoading();
                window.location.href = url.toString();
            });
            
            // Strategic goal filter change handler
            document.getElementById('strategicGoalFilter')?.addEventListener('change', function(){
                const v = this.value;
                const url = new URL(window.location.href);
                url.searchParams.delete('responsible');
                url.searchParams.set('goal', v);
                url.searchParams.set('filterType', 'goal');
                showFilterLoading();
                window.location.href = url.toString();
            });

            const years  = @Html.Raw(yearsJson);
            const counts = @Html.Raw(countsJson);

            // CountUp effect for KPIs (kept for numeric KPIs only)
            document.querySelectorAll('[data-countup]').forEach(el=>{
                const decimals = parseInt(el.getAttribute('data-decimals')||'0');
                const target = parseFloat((el.textContent||'0').replace(/,/g,'')) || 0;
                let start = 0, startTime = null, dur = 900;
                const fmt = (v)=> decimals? v.toFixed(decimals) : Math.round(v).toString();
                function step(ts){
                    if(startTime===null) startTime = ts;
                    const p = Math.min(1,(ts-startTime)/dur);
                    el.textContent = fmt(start + (target-start)*p);
                    if(p<1) requestAnimationFrame(step);
                }
                requestAnimationFrame(step);
            });

            // Status Pie (3rd slice "لم تبدأ" = #b5b5b5)
            const statusEl = document.querySelector("#projectsStatusPie");
            const done = @Model.DoneProjects;
            const inProgress = @Model.InProgressProjects;
            const notStarted = @Model.NotStartedProjects;
            if(statusEl){
                new ApexCharts(statusEl,{
                    chart:{ type:'donut', height:360, fontFamily:'inherit' },
                    series:[done, inProgress, notStarted],
                    labels:['مكتملة','جاري التنفيذ','لم تبدأ'],
                    colors:['#198754','#e16b16','#b5b5b5'],
                    legend:{ position:'bottom' },
                    dataLabels:{ enabled:true, formatter:(val,opts)=> opts.w.globals.series[opts.seriesIndex] },
                    tooltip:{ y:{ formatter:v=> v + ' مشروع'} },
                    plotOptions:{ pie:{ donut:{ size:'68%' } } }
                }).render();
            }

            // Projects Count By Year
            const barEl = document.querySelector("#projectsByYearBar");
            if(barEl){
                const realYears = years.length ? years : ['لا بيانات'];
                const realCounts = years.length ? counts : [0];
                new ApexCharts(barEl,{
                    chart:{ type:'bar', height:360, toolbar:{ show:false }, fontFamily:'inherit' },
                    series:[{ name:'عدد المشاريع', data: realCounts }],
                    xaxis:{ categories: realYears, axisBorder:{ show:false }, axisTicks:{ show:false }, labels:{ style:{ colors:'#6c757d', fontSize:'13px' } } },
                    yaxis:{ labels:{ style:{ colors:'#6c757d', fontSize:'12px' } } },
                    plotOptions:{ bar:{ columnWidth:'45%', borderRadius:6 } },
                    dataLabels:{ enabled:true, formatter:(val)=> val, style:{ fontSize:'12px', fontWeight:'600' } },
                    stroke:{ show:true, width:2, colors:['transparent'] },
                    colors:['#0d6efd'],
                    grid:{ strokeDashArray:6, borderColor:'var(--border, #e5e5e5)' },
                    tooltip:{ y:{ formatter:v=> v + ' مشروع'} }
                } ).render();
            }

            // Budgets per Year Bar
            const budgetYearEl = document.querySelector("#projectsBudgetByYearBar");
            if(budgetYearEl){
                const budgetYears = @Html.Raw(budgetYearsJson);
                const budgetYearValues = @Html.Raw(budgetYearValuesJson);
                const realBudgetYears = budgetYears.length ? budgetYears : ['لا بيانات'];
                const realBudgetValues = budgetYears.length ? budgetYearValues : [0];
                new ApexCharts(budgetYearEl,{
                    chart:{ type:'bar', height:360, toolbar:{ show:false }, fontFamily:'inherit' },
                    series:[{ name:'الميزانية', data: realBudgetValues }],
                    xaxis:{ categories: realBudgetYears, axisBorder:{ show:false }, axisTicks:{ show:false }, labels:{ style:{ colors:'#6c757d', fontSize:'13px' } } },
                    yaxis:{ labels:{ style:{ colors:'#6c757d', fontSize:'12px' }, formatter:(v)=> Intl.NumberFormat('ar-EG',{notation:'compact',maximumFractionDigits:1}).format(v) } },
                    plotOptions:{ bar:{ columnWidth:'45%', borderRadius:6 } },
                    dataLabels:{ enabled:true, formatter:(val)=> Intl.NumberFormat('ar-EG',{notation:'compact',maximumFractionDigits:1}).format(val), style:{ fontSize:'12px', fontWeight:'600' } },
                    stroke:{ show:true, width:2, colors:['transparent'] },
                    colors:['#0d6efd'],
                    grid:{ strokeDashArray:6, borderColor:'var(--border, #e5e5e5)' },
                    tooltip:{ y:{ formatter:v=> Intl.NumberFormat('ar-EG',{minimumFractionDigits:2,maximumFractionDigits:2}).format(v) } }
                }).render();
            }

            // Budgets Donut
            const budgetEl = document.querySelector("#projectsBudgetsDonut");
            if(budgetEl){
                const budgetLabels = @Html.Raw(@budgetLabelsJson);
                const budgetValues = @Html.Raw(@budgetValuesJson);
                if(budgetValues.length){
                    new ApexCharts(budgetEl,{
                        chart:{ type:'donut', height:360, fontFamily:'inherit' },
                        series: budgetValues,
                        labels: budgetLabels,
                        colors:['#4e79a7','#f28e2b','#e15759','#76b7b2','#59a14f','#edc949','#af7aa1','#ff9da7','#9c755f','#bab0ab'],
                        legend:{ position:'right', fontSize:'12px', markers:{ width:10, height:10 }, itemMargin:{ vertical:4 } },
                        dataLabels:{ enabled:true, formatter:(val,opts)=>{ const v=opts.w.globals.series[opts.seriesIndex]; return v?Intl.NumberFormat('ar-EG',{notation:'compact',maximumFractionDigits:1}).format(v):''; } },
                        tooltip:{ y:{ formatter:(v)=> Intl.NumberFormat('ar-EG',{minimumFractionDigits:2, maximumFractionDigits:2}).format(v) } },
                        plotOptions:{ pie:{ donut:{ size:'68%' } } }
                    }).render();
                }
            }

            // NEW: Progress Comparison Chart (Targeted vs Actual) with Yearly and Quarterly views
            const progressComparisonEl = document.querySelector("#progressComparisonChart");
            if(progressComparisonEl){
                const progressYears = @Html.Raw(progressYearsJson);
                const targetedProgress = @Html.Raw(targetedProgressJson);
                const actualProgress = @Html.Raw(actualProgressJson);
                
                const progressQuarters = @Html.Raw(progressQuartersJson);
                const targetedProgressQuarterly = @Html.Raw(targetedProgressQuarterlyJson);
                const actualProgressQuarterly = @Html.Raw(actualProgressQuarterlyJson);

                if(progressYears.length > 0){
                    let progressChart = null;
                    
                    // Populate year filter dropdown
                    const yearFilter = document.getElementById('yearFilter');
                    const viewMode = document.getElementById('viewMode');
                    const quarterNote = document.getElementById('quarterNote');

                    if(yearFilter){
                        progressYears.forEach(year => {
                            const option = document.createElement('option');
                            option.value = year;
                            option.textContent = year;
                            yearFilter.appendChild(option);
                        });

                        // Set default to current year if available
                        const currentYear = new Date().getFullYear();
                        if(progressYears.includes(currentYear)){
                            yearFilter.value = currentYear;
                        }
                    }

                    // Helper to extract quarters for a specific year
                    function getQuartersForYear(year) {
                        return progressQuarters.filter(q => q.startsWith(year + '-'));
                    }
                    
                    // Helper to convert quarter code to Arabic text
                    function quarterToArabic(quarterCode) {
                        const quarterMap = {
                            'Q1': 'الربع الأول',
                            'Q2': 'الربع الثاني',
                            'Q3': 'الربع الثالث',
                            'Q4': 'الربع الرابع'
                        };
                        return quarterMap[quarterCode] || quarterCode;
                    }

                    function renderProgressChart(selectedYear, mode){
                        let categories, targeted, actual;

                        if(mode === 'yearly'){
                            // Yearly view
                            if(quarterNote) quarterNote.style.display = 'none';
                            
                            if(selectedYear === 'all'){
                                categories = progressYears;
                                targeted = targetedProgress;
                                actual = actualProgress;
                            } else {
                                const yearIndex = progressYears.indexOf(parseInt(selectedYear));
                                if(yearIndex !== -1){
                                    categories = [selectedYear];
                                    targeted = [targetedProgress[yearIndex]];
                                    actual = [actualProgress[yearIndex]];
                                } else {
                                    categories = [];
                                    targeted = [];
                                    actual = [];
                                }
                            }
                        } else {
                            // Quarterly view - RTL order
                            if(quarterNote) quarterNote.style.display = 'block';
                            
                            if(selectedYear === 'all'){
                                // Show all quarters from all years with Arabic labels - REVERSED for RTL
                                categories = progressQuarters.map(q => {
                                    const parts = q.split('-');
                                    const year = parts[0];
                                    const quarter = quarterToArabic(parts[1]);
                                    return `${year} ${quarter}`;
                                }).reverse();
                                targeted = targetedProgressQuarterly.slice().reverse();
                                actual = actualProgressQuarterly.slice().reverse();
                            } else {
                                // Show quarters for selected year only with Arabic labels - REVERSED for RTL
                                const yearQuarters = getQuartersForYear(selectedYear);
                                categories = yearQuarters.map(q => quarterToArabic(q.split('-')[1])).reverse();
                                
                                const targetedTemp = yearQuarters.map(q => {
                                    const idx = progressQuarters.indexOf(q);
                                    return idx !== -1 ? targetedProgressQuarterly[idx] : 0;
                                });
                                targeted = targetedTemp.reverse();
                        
                                const actualTemp = yearQuarters.map(q => {
                                    const idx = progressQuarters.indexOf(q);
                                    return idx !== -1 ? actualProgressQuarterly[idx] : 0;
                                });
                                actual = actualTemp.reverse();

                                // If no data for this year, show empty with Arabic labels - REVERSED for RTL
                                if(yearQuarters.length === 0){
                                    categories = ['الربع الرابع', 'الربع الثالث', 'الربع الثاني', 'الربع الأول'];
                                    targeted = [0, 0, 0, 0];
                                    actual = [0, 0, 0, 0];
                                }
                            }
                        }

                        const options = {
                            chart:{ 
                                type:'bar', 
                                height:360, 
                                toolbar:{ show:false }, 
                                fontFamily:'inherit' 
                            },
                            series:[
                                { 
                                    name:'معدل الإنجاز المستهدف', 
                                    data: targeted 
                                },
                                { 
                                    name:'معدل الإنجاز الفعلي', 
                                    data: actual 
                                }
                            ],
                            xaxis:{ 
                                categories: categories, 
                                axisBorder:{ show:false }, 
                                axisTicks:{ show:false }, 
                                labels:{ style:{ colors:'#6c757d', fontSize:'13px' } } 
                            },
                            yaxis:{ 
                                labels:{ 
                                    style:{ colors:'#6c757d', fontSize:'12px' },
                                    formatter:(v)=> v.toFixed(1) + '%'
                                } 
                            },
                            plotOptions:{ 
                                bar:{ 
                                    columnWidth:'55%', 
                                    borderRadius:6,
                                    dataLabels: {
                                        position: 'top'
                                    }
                                } 
                            },
                            dataLabels:{ 
                                enabled:true, 
                                formatter:(val)=> val.toFixed(1) + '%', 
                                style:{ fontSize:'11px', fontWeight:'600' },
                                offsetY: -20
                            },
                            stroke:{ show:true, width:2, colors:['transparent'] },
                            colors:['#17a2b8','#28a745'],
                            grid:{ strokeDashArray:6, borderColor:'var(--border, #e5e5e5)' },
                            legend:{ 
                                position:'top', 
                                horizontalAlign:'right',
                                markers:{ width:10, height:10 }
                            },
                            tooltip:{ 
                                y:{ 
                                    formatter:v=> v.toFixed(2) + '%'
                                } 
                            }
                        };

                        if(progressChart){
                            progressChart.destroy();
                        }
                        progressChart = new ApexCharts(progressComparisonEl, options);
                        progressChart.render();
                    }

                    // Initial render
                    renderProgressChart(yearFilter?.value || 'all', viewMode?.value || 'yearly');

                    // View mode change handler
                    viewMode?.addEventListener('change', function(){
                        renderProgressChart(yearFilter?.value || 'all', this.value);
                    });

                    // Year filter change handler
                    yearFilter?.addEventListener('change', function(){
                        renderProgressChart(this.value, viewMode?.value || 'yearly');
                    });
                }
            }

            // Overdue + At-Risk Table
            $('#overdueProjectsTable').DataTable({
                order: [],
                responsive: true,
                columnDefs: [
                    { targets: 2, orderable: false } // status column
                ],
                language: {
                    // Localize search and length menu
                    search: 'بحث:',
                    searchPlaceholder: 'اكتب للبحث...',
                    lengthMenu: 'إظهار _MENU_ مُدخل',
                    // Keep your custom arrows
                    paginate: { previous: '&lt;', next: '&gt;' },
                    // Helpful Arabic strings
                    info: 'إظهار _START_ إلى _END_ من أصل _TOTAL_ مُدخل',
                    infoEmpty: 'لا توجد بيانات لعرضها',
                    zeroRecords: 'لا توجد نتائج مطابقة',
                    infoFiltered: '(مصفاة من إجمالي _MAX_ مُدخل)'
                }
            });
            $(document).on('click','#overdueProjectsTable .project-row',function(){
                const id = $(this).data('project-id');
                if(id) window.location.href = '/Projects/ProjectDetails/' + id;
            });

        })();
    </script>
}