@model Jobick.Models.Task
@{
    Layout = "~/Views/Shared/_LayoutJobick.cshtml";
    ViewData["Title"] = Model.Id == 0 ? "إضافة مهمة" : "تعديل مهمة";

    // Safe extraction with concise casting
    decimal? projectTotalCost = ViewBag.ProjectTotalCost as decimal?;
    bool hasProjectTotal = (ViewBag.HasProjectTotal as bool?) ?? false;
    decimal existingTasksCost = (ViewBag.ExistingTasksCost as decimal?) ?? 0m;
    decimal otherTasksWeight = (ViewBag.OtherTasksWeight as decimal?) ?? 0m;

    // Determine initial visibility for attachment container (percentage value expected)
    var initialShowAttachment = Model.DoneRatio.HasValue && Model.DoneRatio.Value >= 100m;
}

<div class="content-body" dir="rtl" style="text-align:right;">
    <div class="container-fluid">
        <div class="row page-titles">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="@Url.Action("ProjectDetails", "Projects", new { id = Model.ProjectId })">تفاصيل المشروع</a></li>
                <li class="breadcrumb-item active"><a href="javascript:void(0)">@ViewData["Title"]</a></li>
            </ol>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="card">
                    <div class="card-header">
                        <h4 class="card-title">@ViewData["Title"]</h4>
                    </div>
                    <div class="card-body">
                        <form asp-action="@(Model.Id == 0 ? "PostTask" : "EditTask")" method="post" enctype="multipart/form-data" class="needs-validation" novalidate
                              data-project-total="@(hasProjectTotal ? projectTotalCost.Value.ToString(System.Globalization.CultureInfo.InvariantCulture) : "")"
                              data-has-total="@hasProjectTotal.ToString().ToLower()"
                              data-existing-cost="@existingTasksCost.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                              data-other-weight-sum="@otherTasksWeight.ToString(System.Globalization.CultureInfo.InvariantCulture)"
                              data-has-existing-attachment="@((!string.IsNullOrEmpty(Model.AttachmentFilePath) && Model.Id != 0).ToString().ToLower())">
                            <!-- Hidden fields -->
                            <input type="hidden" asp-for="Id" />
                            <input type="hidden" asp-for="ProjectId" />
                            <input type="hidden" asp-for="CreatedDate" />
                            <input type="hidden" asp-for="CreatedBy" />
                            <input type="hidden" asp-for="Project" />
                            <input type="hidden" asp-for="CreatedByNavigation" />
                            <input type="hidden" asp-for="AttachmentFileName" />
                            <input type="hidden" asp-for="AttachmentFilePath" />

                            <div class="row">
                                <div class="col-md-6">
                                    <!-- Inputs -->
                                    <div class="mb-3">
                                        <label asp-for="Task1" class="form-label fw-bold">المهمة</label>
                                        <input asp-for="Task1" class="form-control" required maxlength="50" />
                                        <span asp-validation-for="Task1" class="text-danger"></span>
                                    </div>
                                    <div class="mb-3">
                                        <label asp-for="StageName" class="form-label fw-bold">اسم المرحلة</label>
                                        <input asp-for="StageName" class="form-control" required maxlength="50" />
                                        <span asp-validation-for="StageName" class="text-danger"></span>
                                    </div>
                                    <div class="mb-3">
                                        <label asp-for="ImplementorDepartment" class="form-label fw-bold">القسم المنفذ</label>
                                        <input asp-for="ImplementorDepartment" class="form-control" required maxlength="50" />
                                        <span asp-validation-for="ImplementorDepartment" class="text-danger"></span>
                                    </div>
                                    <div class="mb-3">
                                        <label asp-for="DepartmentResponsible" class="form-label fw-bold">القسم المسؤول</label>
                                        <input asp-for="DepartmentResponsible" class="form-control" required maxlength="50" />
                                        <span asp-validation-for="DepartmentResponsible" class="text-danger"></span>
                                    </div>
                                    <div class="mb-3">
                                        <label asp-for="ExpectedStartDate" class="form-label fw-bold">تاريخ البدء المتوقع</label>
                                        <input asp-for="ExpectedStartDate" type="date" class="form-control js-date" required dir="rtl" style="text-align:right;" />
                                        <span asp-validation-for="ExpectedStartDate" class="text-danger"></span>
                                    </div>
                                    <div class="mb-3">
                                        <label asp-for="ExpectedEndDate" class="form-label fw-bold">تاريخ الانتهاء المتوقع</label>
                                        <input asp-for="ExpectedEndDate" type="date" class="form-control js-date" required dir="rtl" style="text-align:right;" />
                                        <span asp-validation-for="ExpectedEndDate" class="text-danger"></span>
                                    </div>

                                    <div class="mb-3" id="actualEndDateContainer" style="display:@(initialShowAttachment ? "block" : "none");">
                                        <label asp-for="ActualEndDate" class="form-label fw-bold">تاريخ الانتهاء الفعلي</label>
                                        <input asp-for="ActualEndDate" id="actualEndDateInput" type="date" class="form-control js-date" dir="rtl" style="text-align:right;" />
                                        <span asp-validation-for="ActualEndDate" class="text-danger"></span>
                                        <small class="form-text text-muted">مطلوب عند اكتمال المهمة بنسبة 100%.</small>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="mb-3">
                                        <label asp-for="Weight" class="form-label fw-bold">الوزن</label>
                                        <input asp-for="Weight" id="weightInput" type="number" step="0.01" class="form-control" min="0" max="100" required />
                                        <span asp-validation-for="Weight" class="text-danger"></span>
                                        <small class="form-text text-muted">ادخل وزن المهمة بحد اقصي 100</small>
                                        <small class="form-text text-muted d-block">
                                            إجمالي أوزان المهام الأخرى: <span id="otherWeightSpan">@otherTasksWeight.ToString("N2")</span>% — المتاح: <span id="remainingWeightSpan">@Math.Max(100m - otherTasksWeight, 0m).ToString("N2")</span>%
                                        </small>
                                        <div id="weightError" class="invalid-feedback d-block"></div>
                                    </div>

                                    <div class="mb-3">
                                        <label asp-for="DoneRatio" class="form-label fw-bold">نسبة الإنجاز</label>
                                        <input asp-for="DoneRatio" id="doneRatioInput" type="number" step="0.01" class="form-control" min="0" max="100" required />
                                        <span asp-validation-for="DoneRatio" class="text-danger"></span>
                                        <small class="form-text text-muted">أدخل قيمة بين 0 - 100</small>
                                        @if (Model.Id != 0 && (Model.DoneRatio ?? 0) >= 100m)
                                        {
                                            <div class="alert alert-warning py-2 px-3 small mt-2 mb-0" role="alert">
                                                <strong>تحذير !</strong>
                                                سيتم حذف المرفق اذا تم تغيير نسبة الانجاز - اذا تم التعديل بالخطأ اضغط الغاء
                                            </div>
                                        }
                                    </div>

                                    <div class="mb-3" id="attachmentContainer" style="display:@(initialShowAttachment ? "block" : "none");">
                                        <label for="Attachment" class="form-label fw-bold">رفع المرفق (مطلوب عند اكتمال المهمة)</label>
                                        <small class="form-text text-muted d-block mb-2">الامتدادات المدعومة: PDF، JPG، PNG، DOC، DOCX، XLS، XLSX</small>
                                        @if (!string.IsNullOrEmpty(Model.AttachmentFilePath) && Model.Id != 0)
                                        {
                                            <div class="mb-2">
                                                <span class="text-success">تم إرفاق ملف بالفعل.</span>
                                                <a class="btn btn-link" href="@Url.Action("DownloadAttachment", "Tasks", new { id = Model.Id })">تحميل الملف الحالي</a>
                                            </div>
                                        }
                                        else
                                        {
                                            <input type="file" name="Attachment" id="Attachment" class="form-control" accept=".pdf,.jpg,.jpeg,.png,.doc,.docx,.xls,.xlsx" />
                                            <span class="text-danger" id="attachmentError"></span>
                                        }
                                    </div>

                                    <div class="mb-3">
                                        <label asp-for="DefinationOfDone" class="form-label fw-bold">المخرجات (DOD)</label>
                                        <textarea asp-for="DefinationOfDone" class="form-control" required maxlength="2000"></textarea>
                                        <span asp-validation-for="DefinationOfDone" class="text-danger"></span>
                                    </div>
                                    <div class="mb-3">
                                        <label asp-for="ManyDaysToComplete" class="form-label fw-bold">عدد الأيام لإكمال المهمة</label>
                                        <input asp-for="ManyDaysToComplete" type="number" class="form-control" required />
                                        <span asp-validation-for="ManyDaysToComplete" class="text-danger"></span>
                                    </div>

                                    <div class="mb-3">
                                        <label asp-for="Cost" class="form-label fw-bold">التكلفة</label>
                                        <input asp-for="Cost" id="costInput" type="number" step="0.01" class="form-control" min="0" required />
                                        <span asp-validation-for="Cost" class="text-danger"></span>
                                        <small class="form-text text-muted d-block">
                                            التكلفة المتبقية قبل هذه المهمة:
                                            <span id="remainingBeforeSpan">@(hasProjectTotal ? Math.Max(projectTotalCost.GetValueOrDefault() - existingTasksCost, 0).ToString("N2") : "غير محدد")</span>
                                        </small>
                                        <div id="costWarning" class="alert alert-warning d-none mt-2 mb-0 py-2 px-3" style="font-size:0.85rem;"></div>
                                    </div>
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary" id="saveBtn">حفظ</button>
                            <a href="@Url.Action("ProjectDetails", "Projects", new { id = Model.ProjectId })" class="btn btn-secondary">إلغاء</a>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Jobick_script {
    <script src="~/Jobick/vendor/global/global.min.js"></script>
    <script src="~/Jobick/vendor/bootstrap-select/dist/js/bootstrap-select.min.js"></script>
    <script src="~/Jobick/vendor/bootstrap-datepicker-master/js/bootstrap-datepicker.min.js"></script>
    <script src="~/Jobick/js/custom.min.js"></script>
    <script src="~/Jobick/js/dlabnav-init.js"></script>

    <script>
        (function () {
            'use strict';

            const form = document.querySelector('form.needs-validation');
            if (!form) return;

            // Cache elements once
            const els = {
                weightInput: document.getElementById('weightInput'),
                weightError: document.getElementById('weightError'),
                remainingWeightSpan: document.getElementById('remainingWeightSpan'),
                saveBtn: document.getElementById('saveBtn'),
                doneRatioInput: document.getElementById('doneRatioInput'),
                attachmentContainer: document.getElementById('attachmentContainer'),
                actualEndDateContainer: document.getElementById('actualEndDateContainer'),
                actualEndDateInput: document.getElementById('actualEndDateInput'),
                attachmentInput: document.getElementById('Attachment'),
                attachmentError: document.getElementById('attachmentError'),
                costInput: document.getElementById('costInput'),
                costWarning: document.getElementById('costWarning'),
                remainingBeforeSpan: document.getElementById('remainingBeforeSpan')
            };

            // Centralized state
            const state = {
                otherWeight: parseFloat(form.dataset.otherWeightSum) || 0,
                weightLimit: 100,
                hasTotal: form.dataset.hasTotal === 'true',
                projectTotal: parseFloat(form.dataset.projectTotal) || 0,
                existingCost: parseFloat(form.dataset.existingCost) || 0,
                hasExistingAttachment: form.dataset.hasExistingAttachment === 'true',
                weightInvalid: false,
                completionInvalid: false
            };

            // Format helpers
            function fmtPercent(n) {
                try { return n.toLocaleString('ar-EG', { minimumFractionDigits: 2, maximumFractionDigits: 2 }); }
                catch { return (Math.round(n * 100) / 100).toString(); }
            }
            function fmtNumber(n) {
                try { return n.toLocaleString('ar-EG', { minimumFractionDigits: 0, maximumFractionDigits: 0 }); }
                catch { return Math.round(n).toString(); }
            }
            function applySaveState() {
                if (els.saveBtn) els.saveBtn.disabled = !!(state.weightInvalid || state.completionInvalid);
            }

            // Weight validation
            function validateWeight() {
                if (!els.weightInput) return;

                const entered = parseFloat(els.weightInput.value);
                const weight = isNaN(entered) ? 0 : entered;
                const total = state.otherWeight + weight;
                const remainingBefore = Math.max(state.weightLimit - state.otherWeight, 0);

                if (els.remainingWeightSpan) els.remainingWeightSpan.textContent = fmtPercent(remainingBefore);

                if (total > state.weightLimit) {
                    const exceededBy = total - state.weightLimit;
                    els.weightInput.classList.add('is-invalid');
                    els.weightInput.setCustomValidity('إجمالي الأوزان يتجاوز 100%');
                    if (els.weightError) {
                        els.weightError.textContent = 'خطأ: مجموع الأوزان (' + fmtPercent(total) + '%) يتجاوز الحد الأقصى 100%. مقدار التجاوز: ' + fmtPercent(exceededBy) + '%.\u200f';
                    }
                    state.weightInvalid = true;
                } else {
                    els.weightInput.classList.remove('is-invalid');
                    els.weightInput.setCustomValidity('');
                    if (els.weightError) els.weightError.textContent = '';
                    state.weightInvalid = false;
                }
                applySaveState();
            }

            // Cost warning
            function updateCostWarning() {
                if (!els.costInput || !els.costWarning) return;
                const entered = parseFloat(els.costInput.value) || 0;
                if (!state.hasTotal) {
                    els.costWarning.classList.remove('d-none', 'alert-warning');
                    els.costWarning.classList.add('alert-info');
                    els.costWarning.textContent = 'لم يتم تحديد التكلفة الإجمالية للمشروع. لن يتم التحقق من تجاوز الميزانية. يُفضل تحديدها من تفاصيل المشروع أولاً.';
                    if (els.remainingBeforeSpan) els.remainingBeforeSpan.textContent = 'غير محدد';
                    return;
                }
                const newTotal = state.existingCost + entered;
                const remaining = Math.max(state.projectTotal - state.existingCost, 0);
                if (els.remainingBeforeSpan) els.remainingBeforeSpan.textContent = fmtNumber(remaining);
                if (newTotal > state.projectTotal) {
                    const exceededBy = newTotal - state.projectTotal;
                    els.costWarning.classList.remove('d-none', 'alert-info');
                    els.costWarning.classList.add('alert-warning');
                    els.costWarning.innerHTML = 'تنبيه: مجموع تكاليف المهام بعد إضافة هذه المهمة (' + fmtNumber(newTotal) + ') سيتجاوز تكلفة المشروع (' + fmtNumber(state.projectTotal) + '). مقدار التجاوز: ' + fmtNumber(exceededBy) + '.';
                } else {
                    els.costWarning.classList.add('d-none');
                    els.costWarning.classList.remove('alert-warning', 'alert-info');
                    els.costWarning.textContent = '';
                }
            }

            // Completion (attachment + actual end date)
            function toggleCompletion() {
                const ratio = parseFloat(els.doneRatioInput?.value) || 0;
                const show = ratio >= 100;

                if (els.attachmentContainer) {
                    els.attachmentContainer.style.display = show ? 'block' : 'none';
                    if (!show && els.attachmentInput) {
                        els.attachmentInput.value = '';
                      }
                    if (!show && els.attachmentError) {
                        els.attachmentError.textContent = '';
                      }
                }

                if (els.actualEndDateContainer && els.actualEndDateInput) {
                    els.actualEndDateContainer.style.display = show ? 'block' : 'none';
                    if (show) {
                        els.actualEndDateInput.setAttribute('required', 'required');
                        els.actualEndDateInput.setCustomValidity('');
                    } else {
                        els.actualEndDateInput.removeAttribute('required');
                        els.actualEndDateInput.value = '';
                        els.actualEndDateInput.setCustomValidity('');
                    }
                }

                let actualOk = true;
                let attachOk = true;
                if (show) {
                    actualOk = !!(els.actualEndDateInput && els.actualEndDateInput.value);
                    attachOk = state.hasExistingAttachment || (els.attachmentInput && els.attachmentInput.files && els.attachmentInput.files.length > 0);

                    if (els.actualEndDateInput) {
                        if (!actualOk) {
                            els.actualEndDateInput.classList.add('is-invalid');
                            els.actualEndDateInput.setCustomValidity('مطلوب عند اكتمال المهمة');
                        } else {
                            els.actualEndDateInput.classList.remove('is-invalid');
                            els.actualEndDateInput.setCustomValidity('');
                        }
                    }
                    if (els.attachmentError) {
                        els.attachmentError.textContent = attachOk ? '' : 'المرفق مطلوب عند اكتمال المهمة بنسبة 100%.';
                    }
                } else {
                    if (els.actualEndDateInput) {
                        els.actualEndDateInput.classList.remove('is-invalid');
                        els.actualEndDateInput.setCustomValidity('');
                    }
                    if (els.attachmentError) {
                        els.attachmentError.textContent = '';
                    }
                }

                state.completionInvalid = !(actualOk && attachOk);
                applySaveState();
            }

            // Bind once
            els.weightInput?.addEventListener('input', validateWeight);
            els.costInput?.addEventListener('input', updateCostWarning);
            els.doneRatioInput?.addEventListener('input', toggleCompletion);
            els.attachmentInput?.addEventListener('change', toggleCompletion);
            els.actualEndDateInput?.addEventListener('input', toggleCompletion);

            // Initial state
            validateWeight();
            updateCostWarning();
            toggleCompletion();
        })();
    </script>
}
